package lorawan_test

import (
	"reflect"
	"testing"

	"github.com/tkiraly/lorawan"
)

func TestGeneratenwkskey(t *testing.T) {
	type args struct {
		jr     []byte
		ja     []byte
		appkey []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{"first",
			args{
				jr: []byte{0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
					0x01, 0x55, 0x67, 0x1c, 0x00, 0x0b, 0xa3, 0x04, 0x00,
					0x31, 0x3a, 0xDB, 0xE0, 0x9D, 0xDA},
				ja: []byte{0x20, 0xa3, 0x28, 0x30, 0xdf, 0x17, 0xe2, 0x8a,
					0x2a, 0x4c, 0xc9, 0x35, 0x6b, 0x58, 0x71, 0xb8, 0x94,
					0x00, 0xe0, 0x78, 0x4e, 0x1e, 0xcc, 0x10, 0x3f, 0x03,
					0x4d, 0xac, 0x6c, 0x8e, 0x1d, 0x7c, 0xb6},
				appkey: []byte{0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
					0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
			},
			[]byte{0x06, 0xC8, 0xBF, 0x5C, 0x66, 0x91, 0x46, 0x25, 0xA8,
				0x8E, 0x55, 0xAA, 0x42, 0xB8, 0x9C, 0x3B},
			false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := lorawan.GenerateNwkSKey(tt.args.jr, tt.args.ja, tt.args.appkey)
			if (err != nil) != tt.wantErr {
				t.Errorf("Generatenwkskey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Generatenwkskey() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestGenerateappskey(t *testing.T) {
	type args struct {
		jr     []byte
		ja     []byte
		appkey []byte
	}
	tests := []struct {
		name    string
		args    args
		want    []byte
		wantErr bool
	}{
		{"first",
			args{
				jr: []byte{0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
					0x01, 0x55, 0x67, 0x1c, 0x00, 0x0b, 0xa3, 0x04, 0x00,
					0x31, 0x3a, 0xDB, 0xE0, 0x9D, 0xDA},
				ja: []byte{0x20, 0xa3, 0x28, 0x30, 0xdf, 0x17, 0xe2, 0x8a,
					0x2a, 0x4c, 0xc9, 0x35, 0x6b, 0x58, 0x71, 0xb8, 0x94,
					0x00, 0xe0, 0x78, 0x4e, 0x1e, 0xcc, 0x10, 0x3f, 0x03,
					0x4d, 0xac, 0x6c, 0x8e, 0x1d, 0x7c, 0xb6},
				appkey: []byte{0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
					0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02},
			},
			[]byte{0x92, 0x93, 0x52, 0x33, 0x95, 0x8F, 0xBB, 0x74, 0x6F,
				0x4C, 0x56, 0x75, 0x29, 0x3C, 0xDE, 0x03},
			false},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := lorawan.GenerateAppSKey(tt.args.jr, tt.args.ja, tt.args.appkey)
			if (err != nil) != tt.wantErr {
				t.Errorf("Generateappskey() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Generateappskey() = %v, want %v", got, tt.want)
			}
		})
	}
}
